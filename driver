#include "simuc.h"
#include "io_treiber.h"

typedef struct BHandle_Data {
	BYTE Board_allocated;	// 1=allocated, 0=free
	BYTE Port_A_Direction;	// 1=Output, 0=Input
	BYTE Port_B_Direction;
	BYTE Port_C_Direction;
	BYTE Port_D_Direction;
} BHandle;

unsigned short int portvalue;

BHandle BoardHandle_Data;
DSCB GlobalBoardHandle = &BoardHandle_Data;



BYTE Init(DSCB BoardHandle, unsigned long int Steuerwort) {


    switch(Steuerwort){

    case 0x80:{

        io_out16(DIR1,0x0000);      // Konfiguriert alle Bits von Port 1 als Eingang
        io_out16(DIR0,0xFFFF);      // Konfiguriert alle Bits von Port 0 als Ausgang
        Board_allocated  = 1;
        Port_A_Direction = 1;
        Port_B_Direction = 1;
        Port_C_Direction = 1;
        Port_D_Direction = 1;
        break;

    }

    // Eingang Port D
    case 0x81:{

        io_out16(DIR1,0x0000);      // Konfiguriert alle Bits von Port 1 als Eingang
        io_out16(DIR0,0xFFFF);      // Konfiguriert alle Bits von Port 0 als Ausgang
        Board_allocated  = 1;
        Port_A_Direction = 1;
        Port_B_Direction = 1;
        Port_C_Direction = 1;
        Port_D_Direction = 0;
        break;

    }

    // Eingang Port C
    case 0x88:{

        io_out16(DIR1,0x0000);      // Konfiguriert alle Bits von Port 1 als Eingang
        io_out16(DIR0,0xFFFF);      // Konfiguriert alle Bits von Port 0 als Ausgang
        Board_allocated  = 1;
        Port_A_Direction = 1;
        Port_B_Direction = 1;
        Port_C_Direction = 0;
        Port_D_Direction = 1;
        break;

    }
    // Eingang Port C und Port D
    case 0x89:{

        io_out16(DIR1,0x0000);      // Konfiguriert alle Bits von Port 1 als Eingang
        io_out16(DIR0,0xFFFF);      // Konfiguriert alle Bits von Port 0 als Ausgang
        Board_allocated  = 1;
        Port_A_Direction = 1;
        Port_B_Direction = 1;
        Port_C_Direction = 0;
        Port_D_Direction = 0;
        break;

    }

    // Eingang Port B
    case 0x82:{

        io_out16(DIR1,0x0000);      // Konfiguriert alle Bits von Port 1 als Eingang
        io_out16(DIR0,0xFFFF);      // Konfiguriert alle Bits von Port 0 als Ausgang
        Board_allocated  = 1;
        Port_A_Direction = 1;
        Port_B_Direction = 0;
        Port_C_Direction = 1;
        Port_D_Direction = 1;
        break;

    }

    // Eingang Port B und Port D
    case 0x83:{

        io_out16(DIR1,0x0000);      // Konfiguriert alle Bits von Port 1 als Eingang
        io_out16(DIR0,0xFFFF);      // Konfiguriert alle Bits von Port 0 als Ausgang
        Board_allocated  = 1;
        Port_A_Direction = 1;
        Port_B_Direction = 0;
        Port_C_Direction = 1;
        Port_D_Direction = 0;
        break;

    }

    // Eingang Port B und Port C
    case 0x8A:{

        io_out16(DIR1,0x0000);      // Konfiguriert alle Bits von Port 1 als Eingang
        io_out16(DIR0,0xFFFF);      // Konfiguriert alle Bits von Port 0 als Ausgang
        Board_allocated  = 1;
        Port_A_Direction = 1;
        Port_B_Direction = 0;
        Port_C_Direction = 0;
        Port_D_Direction = 1;
        break;

    }

    // Eingang Port B, Port C, Port D
    case 0x8B:{

        io_out16(DIR1,0x0000);      // Konfiguriert alle Bits von Port 1 als Eingang
        io_out16(DIR0,0xFFFF);      // Konfiguriert alle Bits von Port 0 als Ausgang
        Board_allocated  = 1;
        Port_A_Direction = 1;
        Port_B_Direction = 0;
        Port_C_Direction = 0;
        Port_D_Direction = 0;
        break;

    }
    // Eingang Port A
    case 0x90:{

        io_out16(DIR1,0x0000);      // Konfiguriert alle Bits von Port 1 als Eingang
        io_out16(DIR0,0xFFFF);      // Konfiguriert alle Bits von Port 0 als Ausgang
        Board_allocated  = 1;
        Port_A_Direction = 0;
        Port_B_Direction = 1;
        Port_C_Direction = 1;
        Port_D_Direction = 1;
        break;

    }

   // Eingang Port A und Port D
    case 0x91:{

        io_out16(DIR1,0x0000);      // Konfiguriert alle Bits von Port 1 als Eingang
        io_out16(DIR0,0xFFFF);      // Konfiguriert alle Bits von Port 0 als Ausgang
        Board_allocated  = 1;
        Port_A_Direction = 0;
        Port_B_Direction = 1;
        Port_C_Direction = 1;
        Port_D_Direction = 0;
        break;

    }

    // Eingang Port A und Port C
    case 0x98:{

        io_out16(DIR1,0x0000);      // Konfiguriert alle Bits von Port 1 als Eingang
        io_out16(DIR0,0xFFFF);      // Konfiguriert alle Bits von Port 0 als Ausgang
        Board_allocated  = 1;
        Port_A_Direction = 0;
        Port_B_Direction = 1;
        Port_C_Direction = 0;
        Port_D_Direction = 1;
        break;

    }

    // Eingang Port A, Port C und Port D
    case 0x99:{

        io_out16(DIR1,0x0000);      // Konfiguriert alle Bits von Port 1 als Eingang
        io_out16(DIR0,0xFFFF);      // Konfiguriert alle Bits von Port 0 als Ausgang
        Board_allocated  = 1;
        Port_A_Direction = 0;
        Port_B_Direction = 1;
        Port_C_Direction = 0;
        Port_D_Direction = 0;
        break;

    }

    // Eingang Port A und Port B
    case 0x92:{

        io_out16(DIR1,0x0000);      // Konfiguriert alle Bits von Port 1 als Eingang
        io_out16(DIR0,0xFFFF);      // Konfiguriert alle Bits von Port 0 als Ausgang
        Board_allocated  = 1;
        Port_A_Direction = 0;
        Port_B_Direction = 0;
        Port_C_Direction = 1;
        Port_D_Direction = 1;
        break;

    }

    // Eingang Port A, Port B und Port D
    case 0x93:{

        io_out16(DIR1,0x0000);      // Konfiguriert alle Bits von Port 1 als Eingang
        io_out16(DIR0,0xFFFF);      // Konfiguriert alle Bits von Port 0 als Ausgang
        Board_allocated  = 1;
        Port_A_Direction = 0;
        Port_B_Direction = 0;
        Port_C_Direction = 1;
        Port_D_Direction = 0;
        break;

    }

    // Eingang Port A, Port C und Port B
    case 0x9A:{

        io_out16(DIR1,0x0000);      // Konfiguriert alle Bits von Port 1 als Eingang
        io_out16(DIR0,0xFFFF);      // Konfiguriert alle Bits von Port 0 als Ausgang
        Board_allocated  = 1;
        Port_A_Direction = 0;
        Port_B_Direction = 0;
        Port_C_Direction = 0;
        Port_D_Direction = 1;
        break;

    }

    // Eingang alle Ports
    case 0x9B:{

        io_out16(DIR1,0x0000);      // Konfiguriert alle Bits von Port 1 als Eingang
        io_out16(DIR0,0xFFFF);      // Konfiguriert alle Bits von Port 0 als Ausgang
        Board_allocated  = 1;
        Port_A_Direction = 0;
        Port_B_Direction = 0;
        Port_C_Direction = 0;
        Port_D_Direction = 0;
        break;

    }

    }


    // Port D gelesen wird, so muss InputByte den dualen Zahlenwert,
    // der an den bits 15-8 des Port 1 anliegt,
    // mittels DigitalValue zurück geliefert werden



    // Port C gelesen wird, so muss InputByte den dualen Zahlenwert,
    // der an den bits 7-0 des Port 1 anliegt,
    // mittels DigitalValue zurück geliefert werden

    // Port B gelesen wird, so muss InputByte den dualen Zahlenwert,
    // der an den bits 15-8 des Port 0 anliegt,
    // mittels DigitalValue zurück geliefert werden

    // Port A gelesen wird, so muss InputByte den dualen Zahlenwert,
    // der an den bits 7-0 des Port 0 anliegt,
    // mittels DigitalValue zurück geliefert werden

    return 0; // 0 -> kein Fehler

}

BYTE InputByte(DSCB BoardHandle, BYTE Port, BYTE *DigitalValue) {
	
    // 1 -> ungültiger BoardHandle
    // 2 -> ungültiger Port

    return 0;                           // 0 -> kein Fehler
}

BYTE OutputByte(DSCB BoardHandle, BYTE Port, BYTE DigitalValue) {
	

    // 1 -> ungültiger BoardHandle
    // 2 -> ungültiger Port
    // 3 -> es wurde versucht etwas auf einen als Eingang konfigurierten Port auszugeben

    return 0; // 0 -> kein Fehler

}

BYTE Free(DSCB BoardHandle) {

    // 1 -> ungültiger BoardHandle
	
    return 0;                           // 0 -> kein Fehler

}

