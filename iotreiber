#include "simuc.h"
#include "io_treiber.h"

#define wait_for_return
//#include "dsclib.h"

typedef struct BHandle_Data {
    BYTE Board_allocated;                             // 1 = allocated, 0 = free
    BYTE Port_A_Direction;                            // 1 = Output,    0 = Input
	BYTE Port_B_Direction;
	BYTE Port_C_Direction;
	BYTE Port_D_Direction;

} BHandle;

unsigned short int portvalue, help;

BHandle BoardHandle_Data;
DSCB GlobalBoardHandle = &BoardHandle_Data;



BYTE Init(DSCB BoardHandle, unsigned long int Steuerwort) {

     // Wenn besetzt, dann prüfe
    if(BoardHandle->Board_allocated == 1){
        return 1;

    }

    switch(Steuerwort){
        case 0x80:
                    io_out16(DIR1, (0xFFFF));
                    io_out16(DIR0, (0xFFFF));
                    BoardHandle->Board_allocated  =1;
                    BoardHandle->Port_D_Direction =1;
                    BoardHandle->Port_C_Direction =1;
                    BoardHandle->Port_B_Direction =1;
                    BoardHandle->Port_A_Direction =1;

                    break;
        case 0x81:
                    io_out16(DIR1, (0x00FF));
                    io_out16(DIR0, (0xFFFF));
                    BoardHandle->Board_allocated  =1;
                    BoardHandle->Port_D_Direction =0;
                    BoardHandle->Port_C_Direction =1;
                    BoardHandle->Port_B_Direction =1;
                    BoardHandle->Port_A_Direction =1;

                    break;
        case 0x88:
                    io_out16(DIR1, (0xFF00));
                    io_out16(DIR0, (0xFFFF));
                    BoardHandle->Board_allocated  =1;
                    BoardHandle->Port_D_Direction =1;
                    BoardHandle->Port_C_Direction =0;
                    BoardHandle->Port_B_Direction =1;
                    BoardHandle->Port_A_Direction =1;

                    break;
        case 0x89:
                    io_out16(DIR1, (0x0000));
                    io_out16(DIR0, (0xFFFF));
                    BoardHandle->Board_allocated  =1;
                    BoardHandle->Port_D_Direction =0;
                    BoardHandle->Port_C_Direction =0;
                    BoardHandle->Port_B_Direction =1;
                    BoardHandle->Port_A_Direction =1;

                    break;
        case 0x82:
                    io_out16(DIR1, (0xFFFF));
                    io_out16(DIR0, (0x00FF));
                    BoardHandle->Board_allocated  =1;
                    BoardHandle->Port_D_Direction =1;
                    BoardHandle->Port_C_Direction =1;
                    BoardHandle->Port_B_Direction =0;
                    BoardHandle->Port_A_Direction =1;

                    break;
        case 0x83:
                    io_out16(DIR1, (0x00FF));
                    io_out16(DIR0, (0x00FF));
                    BoardHandle->Board_allocated  =1;
                    BoardHandle->Port_D_Direction =0;
                    BoardHandle->Port_C_Direction =1;
                    BoardHandle->Port_B_Direction =0;
                    BoardHandle->Port_A_Direction =1;

                    break;
        case 0x8A:
                    io_out16(DIR1, (0xFF00));
                    io_out16(DIR0, (0x00FF));
                    BoardHandle->Board_allocated  =1;
                    BoardHandle->Port_D_Direction =1;
                    BoardHandle->Port_C_Direction =0;
                    BoardHandle->Port_B_Direction =0;
                    BoardHandle->Port_A_Direction =1;

                    break;
        case 0x8B:

                    io_out16(DIR1,  (0x0000));
                    io_out16(DIR0,  (0x00FF));
                    BoardHandle->Board_allocated  =1;
                    BoardHandle->Port_D_Direction =0;
                    BoardHandle->Port_C_Direction =0;
                    BoardHandle->Port_B_Direction =0;
                    BoardHandle->Port_A_Direction =1;
                    break;
        case 0x90:
                    io_out16(DIR1, (0xFFFF));
                    io_out16(DIR0, (0xFF00));
                    BoardHandle->Board_allocated  =1;
                    BoardHandle->Port_D_Direction =1;
                    BoardHandle->Port_C_Direction =0;
                    BoardHandle->Port_B_Direction =1;
                    BoardHandle->Port_A_Direction =0;

                    break;
        case 0x91:
                    io_out16(DIR1, (0x00FF));
                    io_out16(DIR0, (0xFF00));
                    BoardHandle->Board_allocated  =1;
                    BoardHandle->Port_D_Direction =0;
                    BoardHandle->Port_C_Direction =1;
                    BoardHandle->Port_B_Direction =1;
                    BoardHandle->Port_A_Direction =0;

                    break;
        case 0x98:
                    io_out16(DIR1, (0xFF00));
                    io_out16(DIR0, (0xFF00));
                    BoardHandle->Board_allocated  =1;
                    BoardHandle->Port_D_Direction =1;
                    BoardHandle->Port_C_Direction =0;
                    BoardHandle->Port_B_Direction =1;
                    BoardHandle->Port_A_Direction =0;
                    break;
        case 0x99:
                    io_out16(DIR1, (0x0000));
                    io_out16(DIR0, (0xFF00));
                    BoardHandle->Board_allocated  =1;
                    BoardHandle->Port_D_Direction =0;
                    BoardHandle->Port_C_Direction =0;
                    BoardHandle->Port_B_Direction =1;
                    BoardHandle->Port_A_Direction =0;
                    break;
        case 0x92:
                    io_out16(DIR1, (0xFFFF));
                    io_out16(DIR0, (0x0000));
                    BoardHandle->Board_allocated  =1;
                    BoardHandle->Port_D_Direction =1;
                    BoardHandle->Port_C_Direction =1;
                    BoardHandle->Port_B_Direction =0;
                    BoardHandle->Port_A_Direction =0;

                    break;
        case 0x93:
                    io_out16(DIR1, (0x00FF));
                    io_out16(DIR0, (0x0000));
                    BoardHandle->Board_allocated  =1;
                    BoardHandle->Port_D_Direction =0;
                    BoardHandle->Port_C_Direction =1;
                    BoardHandle->Port_B_Direction =0;
                    BoardHandle->Port_A_Direction =0;

                    break;
        case 0x9A:
                    io_out16(DIR1, (0xFF00));
                    io_out16(DIR0, (0x0000));
                    BoardHandle->Board_allocated  =1;
                    BoardHandle->Port_D_Direction =1;
                    BoardHandle->Port_C_Direction =0;
                    BoardHandle->Port_B_Direction =0;
                    BoardHandle->Port_A_Direction =0;

                    break;
        case 0x9B:
                    io_out16(DIR1, (0x0000));
                    io_out16(DIR0, (0x0000));
                    BoardHandle->Board_allocated  =1;
                    BoardHandle->Port_D_Direction =0;
                    BoardHandle->Port_C_Direction =0;
                    BoardHandle->Port_B_Direction =0;
                    BoardHandle->Port_A_Direction =0;

                    break;

        default: return -1;

        }
    return 0;
    }


BYTE InputByte(DSCB BoardHandle, BYTE Port, BYTE *DigitalValue) {
	
unsigned long int portwert;


    if(BoardHandle->Board_allocated==0){
            return 1;
    }
    switch(Port){
        case PA: if(BoardHandle->Port_A_Direction == 0 ){
            portwert=io_in16(IN0);
            portwert=portwert&0xFF;
            *DigitalValue=portwert;
            return 0;
         }

        return 2;


        case PB: if(BoardHandle->Port_B_Direction == 0){
            portwert=io_in16(IN0);
            portwert=portwert>>8;
            *DigitalValue=portwert;
            return 0;
        }

        return 2;
        break;

        case PC:if(BoardHandle->Port_C_Direction == 0){
            portwert=io_in16(IN1);
            portwert=portwert&0xFF;
            *DigitalValue=portwert;
            return 0;
        }
        return 2;
        break;

        case PD:if(BoardHandle->Port_D_Direction == 0){
            portwert=io_in16(IN1);
            portwert=portwert>>8;
            *DigitalValue=portwert;
            return 0;

        }  return 2;
        break;
     }


    // 2 -> ungültiger Port
    }



BYTE OutputByte(DSCB BoardHandle, BYTE Port, BYTE DigitalValue) {
	
    unsigned long int portwert;

    if(BoardHandle->Board_allocated==0)
            return 1;

    switch(Port){
        case PA:
            if(BoardHandle->Port_A_Direction == 1){

            portwert = io_in16(OUT0)& 0xFF00;
            portwert = (portwert | DigitalValue);

            io_out16(OUT0, portwert);
            return 0;
        }return 2;
        break;

        case PB:

        if(BoardHandle->Port_B_Direction == 1){

                    io_out16(OUT0, ((io_in16(IN0)&0x00FF)|(DigitalValue<<8)));
                    return 0;
                }return 2;
           break;

        case PC:

        if(BoardHandle->Port_C_Direction == 1){

                    io_out16(OUT1, ((io_in16(IN1)&0xFF00)|DigitalValue));
                    return 0;
                }return 2;
           break;


        case PD:
        if(BoardHandle->Port_D_Direction == 1){

                    io_out16(OUT1, ((io_in16(IN1)&0xFF00)|(DigitalValue<<8)));
                    return 0;
                }return 2;
            break;



    // 3 -> es wurde versucht etwas auf einen als Eingang konfigurierten Port auszugeben
    return 0; // 0 -> kein Fehler

    }
}

BYTE Free(DSCB BoardHandle) {

    // 1 -> ungültiger BoardHandle
    if(BoardHandle->Board_allocated==0)
        return 1;

    BoardHandle->Board_allocated=0;
	
    return 0;

}

